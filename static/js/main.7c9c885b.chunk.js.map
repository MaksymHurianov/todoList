{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","value","onChange","e","currentTarget","onKeyPress","key","className","tasks","map","t","isDone","type","checked","changeStatus","removeTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","removeTasks","taskID","todoList","find","tl","task","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c9c885b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim()) {\r\n            props.addTask(title.trim(), props.id);\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={() => {\r\n                    props.removeTodoList(props.id)\r\n                }}>X\r\n                </button>\r\n            </h3>\r\n            <div>\r\n                <input value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyUpHandler}\r\n                       className={error ? \"error\" : \"\"}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const removeTask = () => {\r\n                            props.removeTask(t.id, props.id)\r\n                        };\r\n                        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                        }\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={t.isDone}\r\n                                   onChange={changeStatus}\r\n                            />\r\n                            <span>{t.title}</span>\r\n                            <button onClick={() => {\r\n                                props.removeTask(t.id, props.id)\r\n                            }\r\n                            }>X\r\n                            </button>\r\n                        </li>\r\n                    })\r\n                }\r\n                {/* <li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[0].title}</span></li>\r\n                <li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[1].title}</span></li>\r\n                <li><input type=\"checkbox\" checked={props.tasks[0].isDone}/> <span>{props.tasks[2].title}</span></li>*/}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={() => {\r\n                        props.changeFilter(\"all\", props.id)\r\n                    }}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={() => {\r\n                        props.changeFilter(\"active\", props.id)\r\n                    }}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={() => {\r\n                        props.changeFilter(\"completed\", props.id)\r\n                    }}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    /*let [tasks, setTasks] = useState <Array<TaskType>> (\r\n        [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true}\r\n            ]\r\n    )*/\r\n\r\n    let todoListID1 = v1()\r\n    let todoListID2 = v1()\r\n\r\n\r\n    let [filter, setFilter] =  useState<FilterValuesType>(\"all\")\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: false},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true}\r\n        ],\r\n        [todoListID2]:[\r\n            {id: v1(), title: \"Books\", isDone: false},\r\n            {id: v1(), title: \"Butter\", isDone: false},\r\n            {id: v1(), title: \"Onion\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true}\r\n        ]\r\n    })\r\n\r\n/*    let tasks: Array<TaskType> = [\r\n        {id: 1, title: \"HTML&CSS\", isDone: true},\r\n        {id: 2, title: \"JS\", isDone: false},\r\n        {id: 3, title: \"React\", isDone: true},\r\n        {id: 4, title: \"Rest API\", isDone: true},\r\n        {id: 5, title: \"GraphQL\", isDone: true},\r\n    ];*/\r\n\r\n    function addTask(title: string, todoListID: string){\r\n        let todoListTasks = tasks[todoListID]\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false};\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTasks (taskID:string, todoListID: string){\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n\r\n    }\r\n/*\r\n    function changeFilter(value: FilterValuesType){\r\n        setFilter(value)\r\n    }*/\r\n    function changeFilter(value: FilterValuesType, todoListID: string){\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if(todoList){\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function  changeStatus(taskID: string, isDone: boolean,todoListID: string){\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === taskID);\r\n        if(task){\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string){\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(tl => {\r\n                    let tasksForTodolist = tasks[tl.id];\r\n                    if(tl.filter === \"active\"){\r\n                        tasksForTodolist = tasks[tl.id].filter(t => t.isDone === false)\r\n                    }\r\n                    if(tl.filter === \"completed\"){\r\n                        tasksForTodolist = tasks[tl.id].filter(t => t.isDone === true)\r\n                    }\r\n                    return(\r\n                    <TodoList\r\n                              key={tl.id}\r\n                              id={tl.id}\r\n                              title={tl.title}\r\n                              tasks={tasksForTodolist}\r\n                              filter={tl.filter}\r\n                              addTask={addTask}\r\n                              removeTask={removeTasks}\r\n                              changeFilter={changeFilter }\r\n                              changeStatus={changeStatus}\r\n                              removeTodoList={removeTodoList}\r\n                    />)\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}